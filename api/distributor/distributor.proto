syntax = "proto3";

package nighthawk;

import "google/protobuf/duration.proto";
import "google/rpc/status.proto";

import "envoy/config/core/v3/address.proto";

import "api/client/service.proto";
import "api/sink/sink.proto";
import "validate/validate.proto";

// Perform an execution request through an intermediate service that will in
// turn delegate to one or more other services for actual handling.
message DistributedRequest {
  oneof distributed_request_type {
    nighthawk.client.ExecutionRequest execution_request = 1;
    nighthawk.SinkRequest sink_request = 2;
  }
  // Specify one or more services that will handle the request_message
  // associated with this.
  repeated envoy.config.core.v3.Address services = 3;
}

message DistributedResponseFragment {
  oneof distributed_response_type {
    google.rpc.Status error = 1;
    nighthawk.client.ExecutionResponse execution_response = 2;
    nighthawk.SinkResponse sink_response = 3;
    // The source of the response.
    envoy.config.core.v3.Address service = 4;
  }
}

// Carries responses associated with a DistributedRequest.
message DistributedResponse {
  repeated DistributedResponseFragment fragment = 1;
  google.rpc.Status error = 2;
  /*
  oneof distributed_response_type {
    google.rpc.Status error = 1;
    ExecutionResponse execution_response = 2;
    SinkResponse sink_response = 3;
  }
*/
  // The source of the response.
  // envoy.config.core.v3.Address service = 4;
}

// Service which proxies messages to one or more other services for handling.
service NighthawkDistributor {
  // Propagate StartRequest wrapped in DistributedRequest to one or more other services.
  rpc DistributedRequestStream(stream DistributedRequest) returns (stream DistributedResponse) {
  }
}
