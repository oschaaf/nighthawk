syntax = "proto3";

package nighthawk.client;

import "api/client/options.proto";
import "api/client/output.proto";

message StartRequest {
  CommandLineOptions options = 1;
}

message StartResponse {
}

message UpdateRequest {
  // We support a subset of the options from CommandLineOptions for on-the-fly changes to running tests. 
  // Any option names listed here should match 1:1 with the ones in CommandLineOptions.
  uint64 requests_per_second = 1;
}

message UpdateResponse {
}

message StopRequest {
}

message StopResponse {
  Output output = 1;
}

service NighthawkService {
  /*
  Accepts a new configuration, and returns a string containing a benchmark session-id.
  The session will be queued up and run after any other session running/queued up earlier.
  */
  rpc Start(StartRequest) returns (StartResponse) {
  }

  /*
  Accepts a configuration, and applies it to the running session.
  Returns a Session.

  An explicit flag will be passed in CommandLineOptions to indicate if re-using the existing
  connection-pool is intended. Nighthawk will verify that the requested changes support that, and
  return an error if that is not possible. (E.g. changing the QPS will be implemented by swapping
  the LinearRateLimiter, but requesting preference of new ssl cipers will imply creating a new
  connection pool). How to verify the diff in changes in a generic and easy way remains to be
  figured out.
  */
  rpc Update(UpdateRequest) returns (UpdateResponse) {
  }

  /*
  Blocking call that gets the results of a session initiated via Start.
  */
  rpc Stop(StopRequest) returns (StopResponse) {
  }
}
