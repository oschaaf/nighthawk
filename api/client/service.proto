syntax = "proto3";

package nighthawk.client;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/rpc/status.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

import "envoy/config/core/v3/address.proto";

import "api/client/options.proto";
import "api/client/output.proto";

// Message used to iniate an action on the Nighthawk load test execution gRPC service.
message StartRequest {
  // Request local execution.
  // NOTE: CommandLineOptions is badly named, something like LoadTestSpec would have been better.
  CommandLineOptions options = 1;
}

// TODO(oschaaf): Not implemented yet.
message UpdateRequest {
}

// TODO(oschaaf): Not implemented yet.
message CancellationRequest {
}

message ExecutionRequest {
  oneof command_specific_options {
    option (validate.required) = true;
    StartRequest start_request = 1;
    UpdateRequest update_request = 2;
    CancellationRequest cancellation_request = 3;
  }
}

// Convey results of an ExecutionRequest.
message ExecutionResponse {
  oneof execution_response_type {
    Output output = 1;
    OutputAppendix appendix = 2;
  }
  google.rpc.Status error_detail = 7;
  // Unique id for lookup purposes. This will be taken from CommandLineOptions if set,
  // if it is not set there it will be auto-generated.
  string execution_id = 8;
}

service NighthawkService {
  //  Accepts a stream of ExecutionRequests, which can be used to initiate, update, or cancel a
  //  test. Returns a stream of ExecutionResponse objects which will contain results for all
  //  Nighthawk runs.
  rpc ExecutionStream(stream ExecutionRequest) returns (stream ExecutionResponse) {
  }
}

// Perform an execution request through an intermediate service that will in
// turn delegate to one or more other services for actual handling.
message DistributedRequest {
  oneof distributed_request_type {
    ExecutionRequest execution_request = 1;
    SinkRequest sink_request = 2;
  }
  // Specify one or more services that will handle the request_message
  // associated with this.
  repeated envoy.config.core.v3.Address services = 3;
}

// Carries responses associated with a DistributedRequest.
message DistributedResponse {
  oneof distributed_response_type {
    google.rpc.Status error = 1;
    ExecutionResponse execution_response = 2;
    SinkResponse sink_response = 3;
  }
  // The source of the response.
  envoy.config.core.v3.Address service = 4;
}

// Service which proxies messages to one or more other services for handling.
service NighthawkDistributor {
  // Propagate StartRequest wrapped in DistributedRequest to one or more other services.
  rpc DistributedRequestStream(stream DistributedRequest) returns (stream DistributedResponse) {
  }
}

// Encapsulates an ExecutionResponse.
message StoreExecutionRequest {
  // Response must contain the effective execution id, which will be used as a lookup key.0
  ExecutionResponse execution_response = 1;
}

// Empty return value message, that serves as a future extension point.
message StoreExecutionResponse {
}

message SinkRequest {
  // Unique id for lookup purposes.
  string execution_id = 1;
  // Indicate the desired timeout that will be used to wait for an in progress execution to
  // complete. Optional, default 30 seconds.
  google.protobuf.Duration execution_wait_timeout = 5 [(validate.rules).duration.gt.seconds = 0];
}

message SinkResponse {
  // Response associated to the requested execution id.
  ExecutionResponse execution_response = 1;
  // Indicate if raw results should be returned. Default false.
  // If set, the consuming side should be able to handle OutputAppendix messages,
  // and no aggregation will be performed.
  // If not set an aggregated result will be returned.
  bool raw = 2;
}

service NighthawkSink {
  // Accepts a stream of execution responses, which is the return value of
  // NighthawkService.ExecutionStream. Workers can forward their results using this method.
  rpc StoreExecutionResponseStream(stream StoreExecutionRequest) returns (StoreExecutionResponse) {
  }

  // Gets the stored response of an execution, keyed by execution id.
  rpc SinkRequestStream(stream SinkRequest) returns (stream SinkResponse) {
  }
}
