// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/client/service.proto

#include "api/client/service.grpc.pb.h"
#include "api/client/service.pb.h"

#include <gmock/gmock.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nighthawk {
namespace client {

class MockNighthawkServiceStub : public NighthawkService::StubInterface {
public:
  MOCK_METHOD3(Start, ::grpc::Status(::grpc::ClientContext* context,
                                     const ::nighthawk::client::StartRequest& request,
                                     ::nighthawk::client::StartResponse* response));
  MOCK_METHOD3(AsyncStartRaw,
               ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::StartResponse>*(
                   ::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request,
                   ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncStartRaw,
               ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::StartResponse>*(
                   ::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request,
                   ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Update, ::grpc::Status(::grpc::ClientContext* context,
                                      const ::nighthawk::client::UpdateRequest& request,
                                      ::nighthawk::client::UpdateResponse* response));
  MOCK_METHOD3(AsyncUpdateRaw,
               ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::UpdateResponse>*(
                   ::grpc::ClientContext* context,
                   const ::nighthawk::client::UpdateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUpdateRaw,
               ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::UpdateResponse>*(
                   ::grpc::ClientContext* context,
                   const ::nighthawk::client::UpdateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Stop, ::grpc::Status(::grpc::ClientContext* context,
                                    const ::nighthawk::client::StopRequest& request,
                                    ::nighthawk::client::StopResponse* response));
  MOCK_METHOD3(AsyncStopRaw,
               ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::StopResponse>*(
                   ::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request,
                   ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncStopRaw,
               ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::StopResponse>*(
                   ::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request,
                   ::grpc::CompletionQueue* cq));
};

} // namespace client
} // namespace nighthawk
