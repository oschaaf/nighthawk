#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/client/service.proto
#ifndef GRPC_api_2fclient_2fservice_2eproto__INCLUDED
#define GRPC_api_2fclient_2fservice_2eproto__INCLUDED

#include "api/client/service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace nighthawk {
namespace client {

class NighthawkService final {
 public:
  static constexpr char const* service_full_name() {
    return "nighthawk.client.NighthawkService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Accepts a new configuration, and returns a string containing a benchmark session-id.
    // The session will be queued up and run after any other session running/queued up earlier.
    virtual ::grpc::Status Start(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request, ::nighthawk::client::StartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StartResponse>> AsyncStart(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StartResponse>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StartResponse>> PrepareAsyncStart(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StartResponse>>(PrepareAsyncStartRaw(context, request, cq));
    }
    //
    // Accepts a configuration, and applies it to the running session.
    // Returns a Session.
    //
    // An explicit flag will be passed in CommandLineOptions to indicate if re-using the existing
    // connection-pool is intended. Nighthawk will verify that the requested changes support that, and
    // return an error if that is not possible. (E.g. changing the QPS will be implemented by swapping
    // the LinearRateLimiter, but requesting preference of new ssl cipers will imply creating a new
    // connection pool). How to verify the diff in changes in a generic and easy way remains to be
    // figured out.
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest& request, ::nighthawk::client::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    //
    // Blocking call that gets the results of a session initiated via Start.
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request, ::nighthawk::client::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      //
      // Accepts a new configuration, and returns a string containing a benchmark session-id.
      // The session will be queued up and run after any other session running/queued up earlier.
      virtual void Start(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest* request, ::nighthawk::client::StartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nighthawk::client::StartResponse* response, std::function<void(::grpc::Status)>) = 0;
      //
      // Accepts a configuration, and applies it to the running session.
      // Returns a Session.
      //
      // An explicit flag will be passed in CommandLineOptions to indicate if re-using the existing
      // connection-pool is intended. Nighthawk will verify that the requested changes support that, and
      // return an error if that is not possible. (E.g. changing the QPS will be implemented by swapping
      // the LinearRateLimiter, but requesting preference of new ssl cipers will imply creating a new
      // connection pool). How to verify the diff in changes in a generic and easy way remains to be
      // figured out.
      virtual void Update(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest* request, ::nighthawk::client::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nighthawk::client::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      //
      // Blocking call that gets the results of a session initiated via Start.
      virtual void Stop(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest* request, ::nighthawk::client::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nighthawk::client::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StartResponse>* AsyncStartRaw(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StartResponse>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nighthawk::client::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Start(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request, ::nighthawk::client::StartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StartResponse>> AsyncStart(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StartResponse>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StartResponse>> PrepareAsyncStart(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StartResponse>>(PrepareAsyncStartRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest& request, ::nighthawk::client::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request, ::nighthawk::client::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Start(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest* request, ::nighthawk::client::StartResponse* response, std::function<void(::grpc::Status)>) override;
      void Start(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nighthawk::client::StartResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest* request, ::nighthawk::client::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nighthawk::client::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest* request, ::nighthawk::client::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nighthawk::client::StopResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StartResponse>* AsyncStartRaw(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StartResponse>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::nighthawk::client::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nighthawk::client::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nighthawk::client::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nighthawk::client::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::nighthawk::client::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Start_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Accepts a new configuration, and returns a string containing a benchmark session-id.
    // The session will be queued up and run after any other session running/queued up earlier.
    virtual ::grpc::Status Start(::grpc::ServerContext* context, const ::nighthawk::client::StartRequest* request, ::nighthawk::client::StartResponse* response);
    //
    // Accepts a configuration, and applies it to the running session.
    // Returns a Session.
    //
    // An explicit flag will be passed in CommandLineOptions to indicate if re-using the existing
    // connection-pool is intended. Nighthawk will verify that the requested changes support that, and
    // return an error if that is not possible. (E.g. changing the QPS will be implemented by swapping
    // the LinearRateLimiter, but requesting preference of new ssl cipers will imply creating a new
    // connection pool). How to verify the diff in changes in a generic and easy way remains to be
    // figured out.
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::nighthawk::client::UpdateRequest* request, ::nighthawk::client::UpdateResponse* response);
    //
    // Blocking call that gets the results of a session initiated via Start.
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::nighthawk::client::StopRequest* request, ::nighthawk::client::StopResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Start() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::nighthawk::client::StartRequest* request, ::nighthawk::client::StartResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::nighthawk::client::StartRequest* request, ::grpc::ServerAsyncResponseWriter< ::nighthawk::client::StartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::nighthawk::client::UpdateRequest* request, ::nighthawk::client::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::nighthawk::client::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::nighthawk::client::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::nighthawk::client::StopRequest* request, ::nighthawk::client::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::nighthawk::client::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::nighthawk::client::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Start<WithAsyncMethod_Update<WithAsyncMethod_Stop<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Start() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::nighthawk::client::StartRequest, ::nighthawk::client::StartResponse>(
          [this](::grpc::ServerContext* context,
                 const ::nighthawk::client::StartRequest* request,
                 ::nighthawk::client::StartResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Start(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::nighthawk::client::StartRequest* request, ::nighthawk::client::StartResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Start(::grpc::ServerContext* context, const ::nighthawk::client::StartRequest* request, ::nighthawk::client::StartResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::nighthawk::client::UpdateRequest, ::nighthawk::client::UpdateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::nighthawk::client::UpdateRequest* request,
                 ::nighthawk::client::UpdateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::nighthawk::client::UpdateRequest* request, ::nighthawk::client::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::nighthawk::client::UpdateRequest* request, ::nighthawk::client::UpdateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::nighthawk::client::StopRequest, ::nighthawk::client::StopResponse>(
          [this](::grpc::ServerContext* context,
                 const ::nighthawk::client::StopRequest* request,
                 ::nighthawk::client::StopResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Stop(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::nighthawk::client::StopRequest* request, ::nighthawk::client::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* context, const ::nighthawk::client::StopRequest* request, ::nighthawk::client::StopResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Start<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_Stop<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Start() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::nighthawk::client::StartRequest* request, ::nighthawk::client::StartResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::nighthawk::client::UpdateRequest* request, ::nighthawk::client::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::nighthawk::client::StopRequest* request, ::nighthawk::client::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Start() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::nighthawk::client::StartRequest* request, ::nighthawk::client::StartResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::nighthawk::client::UpdateRequest* request, ::nighthawk::client::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::nighthawk::client::StopRequest* request, ::nighthawk::client::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Start() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Start(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::nighthawk::client::StartRequest* request, ::nighthawk::client::StartResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Start(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::nighthawk::client::UpdateRequest* request, ::nighthawk::client::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Stop(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::nighthawk::client::StopRequest* request, ::nighthawk::client::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Start() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::nighthawk::client::StartRequest, ::nighthawk::client::StartResponse>(std::bind(&WithStreamedUnaryMethod_Start<BaseClass>::StreamedStart, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::nighthawk::client::StartRequest* request, ::nighthawk::client::StartResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nighthawk::client::StartRequest,::nighthawk::client::StartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::nighthawk::client::UpdateRequest, ::nighthawk::client::UpdateResponse>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::nighthawk::client::UpdateRequest* request, ::nighthawk::client::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nighthawk::client::UpdateRequest,::nighthawk::client::UpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::nighthawk::client::StopRequest, ::nighthawk::client::StopResponse>(std::bind(&WithStreamedUnaryMethod_Stop<BaseClass>::StreamedStop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::nighthawk::client::StopRequest* request, ::nighthawk::client::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nighthawk::client::StopRequest,::nighthawk::client::StopResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Stop<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Stop<Service > > > StreamedService;
};

}  // namespace client
}  // namespace nighthawk


#endif  // GRPC_api_2fclient_2fservice_2eproto__INCLUDED
