#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/client/service.proto
#ifndef GRPC_api_2fclient_2fservice_2eproto__INCLUDED
#define GRPC_api_2fclient_2fservice_2eproto__INCLUDED

#include "api/client/service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
} // namespace grpc

namespace nighthawk {
namespace client {

class NighthawkService final {
public:
  static constexpr char const* service_full_name() { return "nighthawk.client.NighthawkService"; }
  class StubInterface {
  public:
    virtual ~StubInterface() {}
    //
    // Accepts a new configuration, and returns a string containing a benchmark session-id.
    // The session will be queued up and run after any other session running/queued up earlier.
    virtual ::grpc::Status QueueSession(::grpc::ClientContext* context,
                                        const ::nighthawk::client::QueueSessionRequest& request,
                                        ::nighthawk::client::QueueSessionResponse* response) = 0;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::QueueSessionResponse>>
    AsyncQueueSession(::grpc::ClientContext* context,
                      const ::nighthawk::client::QueueSessionRequest& request,
                      ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::QueueSessionResponse>>(
          AsyncQueueSessionRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::QueueSessionResponse>>
    PrepareAsyncQueueSession(::grpc::ClientContext* context,
                             const ::nighthawk::client::QueueSessionRequest& request,
                             ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::QueueSessionResponse>>(
          PrepareAsyncQueueSessionRaw(context, request, cq));
    }
    //
    // Accepts a configuration, and applies it to the running session.
    // Returns a Session.
    //
    // An explicit flag will be passed in CommandLineOptions to indicate if re-using the existing
    // connection-pool is intended. Nighthawk will verify that the requested changes support that,
    // and return an error if that is not possible. (E.g. changing the QPS will be implemented by
    // swapping the LinearRateLimiter, but requesting preference of new ssl cipers will imply
    // creating a new connection pool). How to verify the diff in changes in a generic and easy way
    // remains to be figured out.
    virtual ::grpc::Status
    ReconfigureSession(::grpc::ClientContext* context,
                       const ::nighthawk::client::ReconfigureSessionRequest& request,
                       ::nighthawk::client::ReconfigureSessionResponse* response) = 0;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::ReconfigureSessionResponse>>
    AsyncReconfigureSession(::grpc::ClientContext* context,
                            const ::nighthawk::client::ReconfigureSessionRequest& request,
                            ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::nighthawk::client::ReconfigureSessionResponse>>(
          AsyncReconfigureSessionRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::ReconfigureSessionResponse>>
    PrepareAsyncReconfigureSession(::grpc::ClientContext* context,
                                   const ::nighthawk::client::ReconfigureSessionRequest& request,
                                   ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::nighthawk::client::ReconfigureSessionResponse>>(
          PrepareAsyncReconfigureSessionRaw(context, request, cq));
    }
    //
    // Relatively fast call which can be used to poll if a session initiated via QueueSession
    // has completed.
    virtual ::grpc::Status
    IsSessionFinished(::grpc::ClientContext* context,
                      const ::nighthawk::client::IsSessionFinishedRequest& request,
                      ::nighthawk::client::IsSessionFinishedResponse* response) = 0;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::IsSessionFinishedResponse>>
    AsyncIsSessionFinished(::grpc::ClientContext* context,
                           const ::nighthawk::client::IsSessionFinishedRequest& request,
                           ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::nighthawk::client::IsSessionFinishedResponse>>(
          AsyncIsSessionFinishedRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::IsSessionFinishedResponse>>
    PrepareAsyncIsSessionFinished(::grpc::ClientContext* context,
                                  const ::nighthawk::client::IsSessionFinishedRequest& request,
                                  ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::nighthawk::client::IsSessionFinishedResponse>>(
          PrepareAsyncIsSessionFinishedRaw(context, request, cq));
    }
    //
    // Blocking call that gets the results of a session initiated via QueueSession.
    virtual ::grpc::Status
    PopSessionResult(::grpc::ClientContext* context,
                     const ::nighthawk::client::PopSessionResultRequest& request,
                     ::nighthawk::client::PopSessionResultResponse* response) = 0;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::PopSessionResultResponse>>
    AsyncPopSessionResult(::grpc::ClientContext* context,
                          const ::nighthawk::client::PopSessionResultRequest& request,
                          ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::nighthawk::client::PopSessionResultResponse>>(
          AsyncPopSessionResultRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::PopSessionResultResponse>>
    PrepareAsyncPopSessionResult(::grpc::ClientContext* context,
                                 const ::nighthawk::client::PopSessionResultRequest& request,
                                 ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
          ::nighthawk::client::PopSessionResultResponse>>(
          PrepareAsyncPopSessionResultRaw(context, request, cq));
    }
    //
    // Requests the service to shut itself down.
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context,
                                    const ::nighthawk::client::ShutdownRequest& request,
                                    ::nighthawk::client::ShutdownResponse* response) = 0;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::ShutdownResponse>>
    AsyncShutdown(::grpc::ClientContext* context,
                  const ::nighthawk::client::ShutdownRequest& request,
                  ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::ShutdownResponse>>(
          AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::ShutdownResponse>>
    PrepareAsyncShutdown(::grpc::ClientContext* context,
                         const ::nighthawk::client::ShutdownRequest& request,
                         ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::ShutdownResponse>>(
          PrepareAsyncShutdownRaw(context, request, cq));
    }
    class experimental_async_interface {
    public:
      virtual ~experimental_async_interface() {}
      //
      // Accepts a new configuration, and returns a string containing a benchmark session-id.
      // The session will be queued up and run after any other session running/queued up earlier.
      virtual void QueueSession(::grpc::ClientContext* context,
                                const ::nighthawk::client::QueueSessionRequest* request,
                                ::nighthawk::client::QueueSessionResponse* response,
                                std::function<void(::grpc::Status)>) = 0;
      virtual void QueueSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
                                ::nighthawk::client::QueueSessionResponse* response,
                                std::function<void(::grpc::Status)>) = 0;
      //
      // Accepts a configuration, and applies it to the running session.
      // Returns a Session.
      //
      // An explicit flag will be passed in CommandLineOptions to indicate if re-using the existing
      // connection-pool is intended. Nighthawk will verify that the requested changes support that,
      // and return an error if that is not possible. (E.g. changing the QPS will be implemented by
      // swapping the LinearRateLimiter, but requesting preference of new ssl cipers will imply
      // creating a new connection pool). How to verify the diff in changes in a generic and easy
      // way remains to be figured out.
      virtual void ReconfigureSession(::grpc::ClientContext* context,
                                      const ::nighthawk::client::ReconfigureSessionRequest* request,
                                      ::nighthawk::client::ReconfigureSessionResponse* response,
                                      std::function<void(::grpc::Status)>) = 0;
      virtual void ReconfigureSession(::grpc::ClientContext* context,
                                      const ::grpc::ByteBuffer* request,
                                      ::nighthawk::client::ReconfigureSessionResponse* response,
                                      std::function<void(::grpc::Status)>) = 0;
      //
      // Relatively fast call which can be used to poll if a session initiated via QueueSession
      // has completed.
      virtual void IsSessionFinished(::grpc::ClientContext* context,
                                     const ::nighthawk::client::IsSessionFinishedRequest* request,
                                     ::nighthawk::client::IsSessionFinishedResponse* response,
                                     std::function<void(::grpc::Status)>) = 0;
      virtual void IsSessionFinished(::grpc::ClientContext* context,
                                     const ::grpc::ByteBuffer* request,
                                     ::nighthawk::client::IsSessionFinishedResponse* response,
                                     std::function<void(::grpc::Status)>) = 0;
      //
      // Blocking call that gets the results of a session initiated via QueueSession.
      virtual void PopSessionResult(::grpc::ClientContext* context,
                                    const ::nighthawk::client::PopSessionResultRequest* request,
                                    ::nighthawk::client::PopSessionResultResponse* response,
                                    std::function<void(::grpc::Status)>) = 0;
      virtual void PopSessionResult(::grpc::ClientContext* context,
                                    const ::grpc::ByteBuffer* request,
                                    ::nighthawk::client::PopSessionResultResponse* response,
                                    std::function<void(::grpc::Status)>) = 0;
      //
      // Requests the service to shut itself down.
      virtual void Shutdown(::grpc::ClientContext* context,
                            const ::nighthawk::client::ShutdownRequest* request,
                            ::nighthawk::client::ShutdownResponse* response,
                            std::function<void(::grpc::Status)>) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
                            ::nighthawk::client::ShutdownResponse* response,
                            std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }

  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::QueueSessionResponse>*
    AsyncQueueSessionRaw(::grpc::ClientContext* context,
                         const ::nighthawk::client::QueueSessionRequest& request,
                         ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::QueueSessionResponse>*
    PrepareAsyncQueueSessionRaw(::grpc::ClientContext* context,
                                const ::nighthawk::client::QueueSessionRequest& request,
                                ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::nighthawk::client::ReconfigureSessionResponse>*
    AsyncReconfigureSessionRaw(::grpc::ClientContext* context,
                               const ::nighthawk::client::ReconfigureSessionRequest& request,
                               ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::nighthawk::client::ReconfigureSessionResponse>*
    PrepareAsyncReconfigureSessionRaw(::grpc::ClientContext* context,
                                      const ::nighthawk::client::ReconfigureSessionRequest& request,
                                      ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::nighthawk::client::IsSessionFinishedResponse>*
    AsyncIsSessionFinishedRaw(::grpc::ClientContext* context,
                              const ::nighthawk::client::IsSessionFinishedRequest& request,
                              ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::nighthawk::client::IsSessionFinishedResponse>*
    PrepareAsyncIsSessionFinishedRaw(::grpc::ClientContext* context,
                                     const ::nighthawk::client::IsSessionFinishedRequest& request,
                                     ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::nighthawk::client::PopSessionResultResponse>*
    AsyncPopSessionResultRaw(::grpc::ClientContext* context,
                             const ::nighthawk::client::PopSessionResultRequest& request,
                             ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<
        ::nighthawk::client::PopSessionResultResponse>*
    PrepareAsyncPopSessionResultRaw(::grpc::ClientContext* context,
                                    const ::nighthawk::client::PopSessionResultRequest& request,
                                    ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::ShutdownResponse>*
    AsyncShutdownRaw(::grpc::ClientContext* context,
                     const ::nighthawk::client::ShutdownRequest& request,
                     ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::ShutdownResponse>*
    PrepareAsyncShutdownRaw(::grpc::ClientContext* context,
                            const ::nighthawk::client::ShutdownRequest& request,
                            ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
  public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel);
    ::grpc::Status QueueSession(::grpc::ClientContext* context,
                                const ::nighthawk::client::QueueSessionRequest& request,
                                ::nighthawk::client::QueueSessionResponse* response) override;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::nighthawk::client::QueueSessionResponse>>
    AsyncQueueSession(::grpc::ClientContext* context,
                      const ::nighthawk::client::QueueSessionRequest& request,
                      ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::nighthawk::client::QueueSessionResponse>>(
          AsyncQueueSessionRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::nighthawk::client::QueueSessionResponse>>
    PrepareAsyncQueueSession(::grpc::ClientContext* context,
                             const ::nighthawk::client::QueueSessionRequest& request,
                             ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::nighthawk::client::QueueSessionResponse>>(
          PrepareAsyncQueueSessionRaw(context, request, cq));
    }
    ::grpc::Status
    ReconfigureSession(::grpc::ClientContext* context,
                       const ::nighthawk::client::ReconfigureSessionRequest& request,
                       ::nighthawk::client::ReconfigureSessionResponse* response) override;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::nighthawk::client::ReconfigureSessionResponse>>
    AsyncReconfigureSession(::grpc::ClientContext* context,
                            const ::nighthawk::client::ReconfigureSessionRequest& request,
                            ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::nighthawk::client::ReconfigureSessionResponse>>(
          AsyncReconfigureSessionRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::nighthawk::client::ReconfigureSessionResponse>>
    PrepareAsyncReconfigureSession(::grpc::ClientContext* context,
                                   const ::nighthawk::client::ReconfigureSessionRequest& request,
                                   ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::nighthawk::client::ReconfigureSessionResponse>>(
          PrepareAsyncReconfigureSessionRaw(context, request, cq));
    }
    ::grpc::Status
    IsSessionFinished(::grpc::ClientContext* context,
                      const ::nighthawk::client::IsSessionFinishedRequest& request,
                      ::nighthawk::client::IsSessionFinishedResponse* response) override;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::nighthawk::client::IsSessionFinishedResponse>>
    AsyncIsSessionFinished(::grpc::ClientContext* context,
                           const ::nighthawk::client::IsSessionFinishedRequest& request,
                           ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::nighthawk::client::IsSessionFinishedResponse>>(
          AsyncIsSessionFinishedRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::nighthawk::client::IsSessionFinishedResponse>>
    PrepareAsyncIsSessionFinished(::grpc::ClientContext* context,
                                  const ::nighthawk::client::IsSessionFinishedRequest& request,
                                  ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::nighthawk::client::IsSessionFinishedResponse>>(
          PrepareAsyncIsSessionFinishedRaw(context, request, cq));
    }
    ::grpc::Status
    PopSessionResult(::grpc::ClientContext* context,
                     const ::nighthawk::client::PopSessionResultRequest& request,
                     ::nighthawk::client::PopSessionResultResponse* response) override;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::nighthawk::client::PopSessionResultResponse>>
    AsyncPopSessionResult(::grpc::ClientContext* context,
                          const ::nighthawk::client::PopSessionResultRequest& request,
                          ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::nighthawk::client::PopSessionResultResponse>>(
          AsyncPopSessionResultRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReader<::nighthawk::client::PopSessionResultResponse>>
    PrepareAsyncPopSessionResult(::grpc::ClientContext* context,
                                 const ::nighthawk::client::PopSessionResultRequest& request,
                                 ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::nighthawk::client::PopSessionResultResponse>>(
          PrepareAsyncPopSessionResultRaw(context, request, cq));
    }
    ::grpc::Status Shutdown(::grpc::ClientContext* context,
                            const ::nighthawk::client::ShutdownRequest& request,
                            ::nighthawk::client::ShutdownResponse* response) override;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::nighthawk::client::ShutdownResponse>>
    AsyncShutdown(::grpc::ClientContext* context,
                  const ::nighthawk::client::ShutdownRequest& request,
                  ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::nighthawk::client::ShutdownResponse>>(
          AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::nighthawk::client::ShutdownResponse>>
    PrepareAsyncShutdown(::grpc::ClientContext* context,
                         const ::nighthawk::client::ShutdownRequest& request,
                         ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::nighthawk::client::ShutdownResponse>>(
          PrepareAsyncShutdownRaw(context, request, cq));
    }
    class experimental_async final : public StubInterface::experimental_async_interface {
    public:
      void QueueSession(::grpc::ClientContext* context,
                        const ::nighthawk::client::QueueSessionRequest* request,
                        ::nighthawk::client::QueueSessionResponse* response,
                        std::function<void(::grpc::Status)>) override;
      void QueueSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
                        ::nighthawk::client::QueueSessionResponse* response,
                        std::function<void(::grpc::Status)>) override;
      void ReconfigureSession(::grpc::ClientContext* context,
                              const ::nighthawk::client::ReconfigureSessionRequest* request,
                              ::nighthawk::client::ReconfigureSessionResponse* response,
                              std::function<void(::grpc::Status)>) override;
      void ReconfigureSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
                              ::nighthawk::client::ReconfigureSessionResponse* response,
                              std::function<void(::grpc::Status)>) override;
      void IsSessionFinished(::grpc::ClientContext* context,
                             const ::nighthawk::client::IsSessionFinishedRequest* request,
                             ::nighthawk::client::IsSessionFinishedResponse* response,
                             std::function<void(::grpc::Status)>) override;
      void IsSessionFinished(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
                             ::nighthawk::client::IsSessionFinishedResponse* response,
                             std::function<void(::grpc::Status)>) override;
      void PopSessionResult(::grpc::ClientContext* context,
                            const ::nighthawk::client::PopSessionResultRequest* request,
                            ::nighthawk::client::PopSessionResultResponse* response,
                            std::function<void(::grpc::Status)>) override;
      void PopSessionResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
                            ::nighthawk::client::PopSessionResultResponse* response,
                            std::function<void(::grpc::Status)>) override;
      void Shutdown(::grpc::ClientContext* context,
                    const ::nighthawk::client::ShutdownRequest* request,
                    ::nighthawk::client::ShutdownResponse* response,
                    std::function<void(::grpc::Status)>) override;
      void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
                    ::nighthawk::client::ShutdownResponse* response,
                    std::function<void(::grpc::Status)>) override;

    private:
      friend class Stub;
      explicit experimental_async(Stub* stub) : stub_(stub) {}
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override {
      return &async_stub_;
    }

  private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_ {
      this
    };
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::QueueSessionResponse>*
    AsyncQueueSessionRaw(::grpc::ClientContext* context,
                         const ::nighthawk::client::QueueSessionRequest& request,
                         ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::QueueSessionResponse>*
    PrepareAsyncQueueSessionRaw(::grpc::ClientContext* context,
                                const ::nighthawk::client::QueueSessionRequest& request,
                                ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::ReconfigureSessionResponse>*
    AsyncReconfigureSessionRaw(::grpc::ClientContext* context,
                               const ::nighthawk::client::ReconfigureSessionRequest& request,
                               ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::ReconfigureSessionResponse>*
    PrepareAsyncReconfigureSessionRaw(::grpc::ClientContext* context,
                                      const ::nighthawk::client::ReconfigureSessionRequest& request,
                                      ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::IsSessionFinishedResponse>*
    AsyncIsSessionFinishedRaw(::grpc::ClientContext* context,
                              const ::nighthawk::client::IsSessionFinishedRequest& request,
                              ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::IsSessionFinishedResponse>*
    PrepareAsyncIsSessionFinishedRaw(::grpc::ClientContext* context,
                                     const ::nighthawk::client::IsSessionFinishedRequest& request,
                                     ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::PopSessionResultResponse>*
    AsyncPopSessionResultRaw(::grpc::ClientContext* context,
                             const ::nighthawk::client::PopSessionResultRequest& request,
                             ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::PopSessionResultResponse>*
    PrepareAsyncPopSessionResultRaw(::grpc::ClientContext* context,
                                    const ::nighthawk::client::PopSessionResultRequest& request,
                                    ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::ShutdownResponse>*
    AsyncShutdownRaw(::grpc::ClientContext* context,
                     const ::nighthawk::client::ShutdownRequest& request,
                     ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::ShutdownResponse>*
    PrepareAsyncShutdownRaw(::grpc::ClientContext* context,
                            const ::nighthawk::client::ShutdownRequest& request,
                            ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_QueueSession_;
    const ::grpc::internal::RpcMethod rpcmethod_ReconfigureSession_;
    const ::grpc::internal::RpcMethod rpcmethod_IsSessionFinished_;
    const ::grpc::internal::RpcMethod rpcmethod_PopSessionResult_;
    const ::grpc::internal::RpcMethod rpcmethod_Shutdown_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr<::grpc::ChannelInterface>& channel,
                                       const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
  public:
    Service();
    virtual ~Service();
    //
    // Accepts a new configuration, and returns a string containing a benchmark session-id.
    // The session will be queued up and run after any other session running/queued up earlier.
    virtual ::grpc::Status QueueSession(::grpc::ServerContext* context,
                                        const ::nighthawk::client::QueueSessionRequest* request,
                                        ::nighthawk::client::QueueSessionResponse* response);
    //
    // Accepts a configuration, and applies it to the running session.
    // Returns a Session.
    //
    // An explicit flag will be passed in CommandLineOptions to indicate if re-using the existing
    // connection-pool is intended. Nighthawk will verify that the requested changes support that,
    // and return an error if that is not possible. (E.g. changing the QPS will be implemented by
    // swapping the LinearRateLimiter, but requesting preference of new ssl cipers will imply
    // creating a new connection pool). How to verify the diff in changes in a generic and easy way
    // remains to be figured out.
    virtual ::grpc::Status
    ReconfigureSession(::grpc::ServerContext* context,
                       const ::nighthawk::client::ReconfigureSessionRequest* request,
                       ::nighthawk::client::ReconfigureSessionResponse* response);
    //
    // Relatively fast call which can be used to poll if a session initiated via QueueSession
    // has completed.
    virtual ::grpc::Status
    IsSessionFinished(::grpc::ServerContext* context,
                      const ::nighthawk::client::IsSessionFinishedRequest* request,
                      ::nighthawk::client::IsSessionFinishedResponse* response);
    //
    // Blocking call that gets the results of a session initiated via QueueSession.
    virtual ::grpc::Status
    PopSessionResult(::grpc::ServerContext* context,
                     const ::nighthawk::client::PopSessionResultRequest* request,
                     ::nighthawk::client::PopSessionResultResponse* response);
    //
    // Requests the service to shut itself down.
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context,
                                    const ::nighthawk::client::ShutdownRequest* request,
                                    ::nighthawk::client::ShutdownResponse* response);
  };
  template <class BaseClass> class WithAsyncMethod_QueueSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithAsyncMethod_QueueSession() { ::grpc::Service::MarkMethodAsync(0); }
    ~WithAsyncMethod_QueueSession() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status QueueSession(::grpc::ServerContext* context,
                                const ::nighthawk::client::QueueSessionRequest* request,
                                ::nighthawk::client::QueueSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueueSession(
        ::grpc::ServerContext* context, ::nighthawk::client::QueueSessionRequest* request,
        ::grpc::ServerAsyncResponseWriter<::nighthawk::client::QueueSessionResponse>* response,
        ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq,
        void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  template <class BaseClass> class WithAsyncMethod_ReconfigureSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithAsyncMethod_ReconfigureSession() { ::grpc::Service::MarkMethodAsync(1); }
    ~WithAsyncMethod_ReconfigureSession() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status
    ReconfigureSession(::grpc::ServerContext* context,
                       const ::nighthawk::client::ReconfigureSessionRequest* request,
                       ::nighthawk::client::ReconfigureSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconfigureSession(
        ::grpc::ServerContext* context, ::nighthawk::client::ReconfigureSessionRequest* request,
        ::grpc::ServerAsyncResponseWriter<::nighthawk::client::ReconfigureSessionResponse>*
            response,
        ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq,
        void* tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  template <class BaseClass> class WithAsyncMethod_IsSessionFinished : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithAsyncMethod_IsSessionFinished() { ::grpc::Service::MarkMethodAsync(2); }
    ~WithAsyncMethod_IsSessionFinished() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status
    IsSessionFinished(::grpc::ServerContext* context,
                      const ::nighthawk::client::IsSessionFinishedRequest* request,
                      ::nighthawk::client::IsSessionFinishedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsSessionFinished(
        ::grpc::ServerContext* context, ::nighthawk::client::IsSessionFinishedRequest* request,
        ::grpc::ServerAsyncResponseWriter<::nighthawk::client::IsSessionFinishedResponse>* response,
        ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq,
        void* tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  template <class BaseClass> class WithAsyncMethod_PopSessionResult : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithAsyncMethod_PopSessionResult() { ::grpc::Service::MarkMethodAsync(3); }
    ~WithAsyncMethod_PopSessionResult() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status
    PopSessionResult(::grpc::ServerContext* context,
                     const ::nighthawk::client::PopSessionResultRequest* request,
                     ::nighthawk::client::PopSessionResultResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPopSessionResult(
        ::grpc::ServerContext* context, ::nighthawk::client::PopSessionResultRequest* request,
        ::grpc::ServerAsyncResponseWriter<::nighthawk::client::PopSessionResultResponse>* response,
        ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq,
        void* tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  template <class BaseClass> class WithAsyncMethod_Shutdown : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithAsyncMethod_Shutdown() { ::grpc::Service::MarkMethodAsync(4); }
    ~WithAsyncMethod_Shutdown() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context,
                            const ::nighthawk::client::ShutdownRequest* request,
                            ::nighthawk::client::ShutdownResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(
        ::grpc::ServerContext* context, ::nighthawk::client::ShutdownRequest* request,
        ::grpc::ServerAsyncResponseWriter<::nighthawk::client::ShutdownResponse>* response,
        ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq,
        void* tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_QueueSession<
      WithAsyncMethod_ReconfigureSession<WithAsyncMethod_IsSessionFinished<
          WithAsyncMethod_PopSessionResult<WithAsyncMethod_Shutdown<Service>>>>>
      AsyncService;
  template <class BaseClass> class ExperimentalWithCallbackMethod_QueueSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithCallbackMethod_QueueSession() {
      ::grpc::Service::experimental().MarkMethodCallback(
          0, new ::grpc::internal::CallbackUnaryHandler<::nighthawk::client::QueueSessionRequest,
                                                        ::nighthawk::client::QueueSessionResponse>(
                 [this](::grpc::ServerContext* context,
                        const ::nighthawk::client::QueueSessionRequest* request,
                        ::nighthawk::client::QueueSessionResponse* response,
                        ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->QueueSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_QueueSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueueSession(::grpc::ServerContext* context,
                                const ::nighthawk::client::QueueSessionRequest* request,
                                ::nighthawk::client::QueueSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void QueueSession(::grpc::ServerContext* context,
                              const ::nighthawk::client::QueueSessionRequest* request,
                              ::nighthawk::client::QueueSessionResponse* response,
                              ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReconfigureSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithCallbackMethod_ReconfigureSession() {
      ::grpc::Service::experimental().MarkMethodCallback(
          1, new ::grpc::internal::CallbackUnaryHandler<
                 ::nighthawk::client::ReconfigureSessionRequest,
                 ::nighthawk::client::ReconfigureSessionResponse>(
                 [this](::grpc::ServerContext* context,
                        const ::nighthawk::client::ReconfigureSessionRequest* request,
                        ::nighthawk::client::ReconfigureSessionResponse* response,
                        ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReconfigureSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ReconfigureSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    ReconfigureSession(::grpc::ServerContext* context,
                       const ::nighthawk::client::ReconfigureSessionRequest* request,
                       ::nighthawk::client::ReconfigureSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReconfigureSession(::grpc::ServerContext* context,
                                    const ::nighthawk::client::ReconfigureSessionRequest* request,
                                    ::nighthawk::client::ReconfigureSessionResponse* response,
                                    ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IsSessionFinished : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithCallbackMethod_IsSessionFinished() {
      ::grpc::Service::experimental().MarkMethodCallback(
          2, new ::grpc::internal::CallbackUnaryHandler<
                 ::nighthawk::client::IsSessionFinishedRequest,
                 ::nighthawk::client::IsSessionFinishedResponse>(
                 [this](::grpc::ServerContext* context,
                        const ::nighthawk::client::IsSessionFinishedRequest* request,
                        ::nighthawk::client::IsSessionFinishedResponse* response,
                        ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->IsSessionFinished(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_IsSessionFinished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    IsSessionFinished(::grpc::ServerContext* context,
                      const ::nighthawk::client::IsSessionFinishedRequest* request,
                      ::nighthawk::client::IsSessionFinishedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IsSessionFinished(::grpc::ServerContext* context,
                                   const ::nighthawk::client::IsSessionFinishedRequest* request,
                                   ::nighthawk::client::IsSessionFinishedResponse* response,
                                   ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PopSessionResult : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithCallbackMethod_PopSessionResult() {
      ::grpc::Service::experimental().MarkMethodCallback(
          3,
          new ::grpc::internal::CallbackUnaryHandler<::nighthawk::client::PopSessionResultRequest,
                                                     ::nighthawk::client::PopSessionResultResponse>(
              [this](::grpc::ServerContext* context,
                     const ::nighthawk::client::PopSessionResultRequest* request,
                     ::nighthawk::client::PopSessionResultResponse* response,
                     ::grpc::experimental::ServerCallbackRpcController* controller) {
                return this->PopSessionResult(context, request, response, controller);
              }));
    }
    ~ExperimentalWithCallbackMethod_PopSessionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    PopSessionResult(::grpc::ServerContext* context,
                     const ::nighthawk::client::PopSessionResultRequest* request,
                     ::nighthawk::client::PopSessionResultResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PopSessionResult(::grpc::ServerContext* context,
                                  const ::nighthawk::client::PopSessionResultRequest* request,
                                  ::nighthawk::client::PopSessionResultResponse* response,
                                  ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass> class ExperimentalWithCallbackMethod_Shutdown : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithCallbackMethod_Shutdown() {
      ::grpc::Service::experimental().MarkMethodCallback(
          4, new ::grpc::internal::CallbackUnaryHandler<::nighthawk::client::ShutdownRequest,
                                                        ::nighthawk::client::ShutdownResponse>(
                 [this](::grpc::ServerContext* context,
                        const ::nighthawk::client::ShutdownRequest* request,
                        ::nighthawk::client::ShutdownResponse* response,
                        ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Shutdown(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Shutdown() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context,
                            const ::nighthawk::client::ShutdownRequest* request,
                            ::nighthawk::client::ShutdownResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Shutdown(::grpc::ServerContext* context,
                          const ::nighthawk::client::ShutdownRequest* request,
                          ::nighthawk::client::ShutdownResponse* response,
                          ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  typedef ExperimentalWithCallbackMethod_QueueSession<
      ExperimentalWithCallbackMethod_ReconfigureSession<
          ExperimentalWithCallbackMethod_IsSessionFinished<
              ExperimentalWithCallbackMethod_PopSessionResult<
                  ExperimentalWithCallbackMethod_Shutdown<Service>>>>>
      ExperimentalCallbackService;
  template <class BaseClass> class WithGenericMethod_QueueSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithGenericMethod_QueueSession() { ::grpc::Service::MarkMethodGeneric(0); }
    ~WithGenericMethod_QueueSession() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status QueueSession(::grpc::ServerContext* context,
                                const ::nighthawk::client::QueueSessionRequest* request,
                                ::nighthawk::client::QueueSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass> class WithGenericMethod_ReconfigureSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithGenericMethod_ReconfigureSession() { ::grpc::Service::MarkMethodGeneric(1); }
    ~WithGenericMethod_ReconfigureSession() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status
    ReconfigureSession(::grpc::ServerContext* context,
                       const ::nighthawk::client::ReconfigureSessionRequest* request,
                       ::nighthawk::client::ReconfigureSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass> class WithGenericMethod_IsSessionFinished : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithGenericMethod_IsSessionFinished() { ::grpc::Service::MarkMethodGeneric(2); }
    ~WithGenericMethod_IsSessionFinished() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status
    IsSessionFinished(::grpc::ServerContext* context,
                      const ::nighthawk::client::IsSessionFinishedRequest* request,
                      ::nighthawk::client::IsSessionFinishedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass> class WithGenericMethod_PopSessionResult : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithGenericMethod_PopSessionResult() { ::grpc::Service::MarkMethodGeneric(3); }
    ~WithGenericMethod_PopSessionResult() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status
    PopSessionResult(::grpc::ServerContext* context,
                     const ::nighthawk::client::PopSessionResultRequest* request,
                     ::nighthawk::client::PopSessionResultResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass> class WithGenericMethod_Shutdown : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithGenericMethod_Shutdown() { ::grpc::Service::MarkMethodGeneric(4); }
    ~WithGenericMethod_Shutdown() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context,
                            const ::nighthawk::client::ShutdownRequest* request,
                            ::nighthawk::client::ShutdownResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass> class WithRawMethod_QueueSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithRawMethod_QueueSession() { ::grpc::Service::MarkMethodRaw(0); }
    ~WithRawMethod_QueueSession() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status QueueSession(::grpc::ServerContext* context,
                                const ::nighthawk::client::QueueSessionRequest* request,
                                ::nighthawk::client::QueueSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueueSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
                             ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
                             ::grpc::CompletionQueue* new_call_cq,
                             ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  template <class BaseClass> class WithRawMethod_ReconfigureSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithRawMethod_ReconfigureSession() { ::grpc::Service::MarkMethodRaw(1); }
    ~WithRawMethod_ReconfigureSession() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status
    ReconfigureSession(::grpc::ServerContext* context,
                       const ::nighthawk::client::ReconfigureSessionRequest* request,
                       ::nighthawk::client::ReconfigureSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconfigureSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
                                   ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
                                   ::grpc::CompletionQueue* new_call_cq,
                                   ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  template <class BaseClass> class WithRawMethod_IsSessionFinished : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithRawMethod_IsSessionFinished() { ::grpc::Service::MarkMethodRaw(2); }
    ~WithRawMethod_IsSessionFinished() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status
    IsSessionFinished(::grpc::ServerContext* context,
                      const ::nighthawk::client::IsSessionFinishedRequest* request,
                      ::nighthawk::client::IsSessionFinishedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsSessionFinished(::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
                                  ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
                                  ::grpc::CompletionQueue* new_call_cq,
                                  ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  template <class BaseClass> class WithRawMethod_PopSessionResult : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithRawMethod_PopSessionResult() { ::grpc::Service::MarkMethodRaw(3); }
    ~WithRawMethod_PopSessionResult() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status
    PopSessionResult(::grpc::ServerContext* context,
                     const ::nighthawk::client::PopSessionResultRequest* request,
                     ::nighthawk::client::PopSessionResultResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPopSessionResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
                                 ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
                                 ::grpc::CompletionQueue* new_call_cq,
                                 ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  template <class BaseClass> class WithRawMethod_Shutdown : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithRawMethod_Shutdown() { ::grpc::Service::MarkMethodRaw(4); }
    ~WithRawMethod_Shutdown() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context,
                            const ::nighthawk::client::ShutdownRequest* request,
                            ::nighthawk::client::ShutdownResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
                         ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
                         ::grpc::CompletionQueue* new_call_cq,
                         ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueueSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithRawCallbackMethod_QueueSession() {
      ::grpc::Service::experimental().MarkMethodRawCallback(
          0, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                 [this](::grpc::ServerContext* context, const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response,
                        ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->QueueSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_QueueSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueueSession(::grpc::ServerContext* context,
                                const ::nighthawk::client::QueueSessionRequest* request,
                                ::nighthawk::client::QueueSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void QueueSession(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request,
                              ::grpc::ByteBuffer* response,
                              ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReconfigureSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithRawCallbackMethod_ReconfigureSession() {
      ::grpc::Service::experimental().MarkMethodRawCallback(
          1, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                 [this](::grpc::ServerContext* context, const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response,
                        ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReconfigureSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReconfigureSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    ReconfigureSession(::grpc::ServerContext* context,
                       const ::nighthawk::client::ReconfigureSessionRequest* request,
                       ::nighthawk::client::ReconfigureSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReconfigureSession(::grpc::ServerContext* context,
                                    const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response,
                                    ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IsSessionFinished : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithRawCallbackMethod_IsSessionFinished() {
      ::grpc::Service::experimental().MarkMethodRawCallback(
          2, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                 [this](::grpc::ServerContext* context, const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response,
                        ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->IsSessionFinished(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_IsSessionFinished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    IsSessionFinished(::grpc::ServerContext* context,
                      const ::nighthawk::client::IsSessionFinishedRequest* request,
                      ::nighthawk::client::IsSessionFinishedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IsSessionFinished(::grpc::ServerContext* context,
                                   const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response,
                                   ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PopSessionResult : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithRawCallbackMethod_PopSessionResult() {
      ::grpc::Service::experimental().MarkMethodRawCallback(
          3, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                 [this](::grpc::ServerContext* context, const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response,
                        ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PopSessionResult(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PopSessionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status
    PopSessionResult(::grpc::ServerContext* context,
                     const ::nighthawk::client::PopSessionResultRequest* request,
                     ::nighthawk::client::PopSessionResultResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PopSessionResult(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request,
                                  ::grpc::ByteBuffer* response,
                                  ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass> class ExperimentalWithRawCallbackMethod_Shutdown : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithRawCallbackMethod_Shutdown() {
      ::grpc::Service::experimental().MarkMethodRawCallback(
          4, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                 [this](::grpc::ServerContext* context, const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response,
                        ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Shutdown(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context,
                            const ::nighthawk::client::ShutdownRequest* request,
                            ::nighthawk::client::ShutdownResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Shutdown(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request,
                          ::grpc::ByteBuffer* response,
                          ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass> class WithStreamedUnaryMethod_QueueSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithStreamedUnaryMethod_QueueSession() {
      ::grpc::Service::MarkMethodStreamed(
          0, new ::grpc::internal::StreamedUnaryHandler<::nighthawk::client::QueueSessionRequest,
                                                        ::nighthawk::client::QueueSessionResponse>(
                 std::bind(&WithStreamedUnaryMethod_QueueSession<BaseClass>::StreamedQueueSession,
                           this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QueueSession() override { BaseClassMustBeDerivedFromService(this); }
    // disable regular version of this method
    ::grpc::Status QueueSession(::grpc::ServerContext* context,
                                const ::nighthawk::client::QueueSessionRequest* request,
                                ::nighthawk::client::QueueSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status
    StreamedQueueSession(::grpc::ServerContext* context,
                         ::grpc::ServerUnaryStreamer<::nighthawk::client::QueueSessionRequest,
                                                     ::nighthawk::client::QueueSessionResponse>*
                             server_unary_streamer) = 0;
  };
  template <class BaseClass> class WithStreamedUnaryMethod_ReconfigureSession : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithStreamedUnaryMethod_ReconfigureSession() {
      ::grpc::Service::MarkMethodStreamed(
          1, new ::grpc::internal::StreamedUnaryHandler<
                 ::nighthawk::client::ReconfigureSessionRequest,
                 ::nighthawk::client::ReconfigureSessionResponse>(std::bind(
                 &WithStreamedUnaryMethod_ReconfigureSession<BaseClass>::StreamedReconfigureSession,
                 this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReconfigureSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status
    ReconfigureSession(::grpc::ServerContext* context,
                       const ::nighthawk::client::ReconfigureSessionRequest* request,
                       ::nighthawk::client::ReconfigureSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReconfigureSession(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::nighthawk::client::ReconfigureSessionRequest,
                                    ::nighthawk::client::ReconfigureSessionResponse>*
            server_unary_streamer) = 0;
  };
  template <class BaseClass> class WithStreamedUnaryMethod_IsSessionFinished : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithStreamedUnaryMethod_IsSessionFinished() {
      ::grpc::Service::MarkMethodStreamed(
          2, new ::grpc::internal::StreamedUnaryHandler<
                 ::nighthawk::client::IsSessionFinishedRequest,
                 ::nighthawk::client::IsSessionFinishedResponse>(std::bind(
                 &WithStreamedUnaryMethod_IsSessionFinished<BaseClass>::StreamedIsSessionFinished,
                 this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IsSessionFinished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status
    IsSessionFinished(::grpc::ServerContext* context,
                      const ::nighthawk::client::IsSessionFinishedRequest* request,
                      ::nighthawk::client::IsSessionFinishedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsSessionFinished(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::nighthawk::client::IsSessionFinishedRequest,
                                    ::nighthawk::client::IsSessionFinishedResponse>*
            server_unary_streamer) = 0;
  };
  template <class BaseClass> class WithStreamedUnaryMethod_PopSessionResult : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithStreamedUnaryMethod_PopSessionResult() {
      ::grpc::Service::MarkMethodStreamed(
          3,
          new ::grpc::internal::StreamedUnaryHandler<::nighthawk::client::PopSessionResultRequest,
                                                     ::nighthawk::client::PopSessionResultResponse>(
              std::bind(
                  &WithStreamedUnaryMethod_PopSessionResult<BaseClass>::StreamedPopSessionResult,
                  this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PopSessionResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status
    PopSessionResult(::grpc::ServerContext* context,
                     const ::nighthawk::client::PopSessionResultRequest* request,
                     ::nighthawk::client::PopSessionResultResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPopSessionResult(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::nighthawk::client::PopSessionResultRequest,
                                    ::nighthawk::client::PopSessionResultResponse>*
            server_unary_streamer) = 0;
  };
  template <class BaseClass> class WithStreamedUnaryMethod_Shutdown : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(
          4, new ::grpc::internal::StreamedUnaryHandler<::nighthawk::client::ShutdownRequest,
                                                        ::nighthawk::client::ShutdownResponse>(
                 std::bind(&WithStreamedUnaryMethod_Shutdown<BaseClass>::StreamedShutdown, this,
                           std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Shutdown() override { BaseClassMustBeDerivedFromService(this); }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context,
                            const ::nighthawk::client::ShutdownRequest* request,
                            ::nighthawk::client::ShutdownResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status
    StreamedShutdown(::grpc::ServerContext* context,
                     ::grpc::ServerUnaryStreamer<::nighthawk::client::ShutdownRequest,
                                                 ::nighthawk::client::ShutdownResponse>*
                         server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_QueueSession<
      WithStreamedUnaryMethod_ReconfigureSession<WithStreamedUnaryMethod_IsSessionFinished<
          WithStreamedUnaryMethod_PopSessionResult<WithStreamedUnaryMethod_Shutdown<Service>>>>>
      StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_QueueSession<
      WithStreamedUnaryMethod_ReconfigureSession<WithStreamedUnaryMethod_IsSessionFinished<
          WithStreamedUnaryMethod_PopSessionResult<WithStreamedUnaryMethod_Shutdown<Service>>>>>
      StreamedService;
};

} // namespace client
} // namespace nighthawk

#endif // GRPC_api_2fclient_2fservice_2eproto__INCLUDED
