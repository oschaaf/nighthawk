// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/client/service.proto
#ifndef GRPC_api_2fclient_2fservice_2eproto__INCLUDED
#define GRPC_api_2fclient_2fservice_2eproto__INCLUDED

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

#include "api/client/service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
} // namespace grpc

namespace nighthawk {
namespace client {

class NighthawkService final {
public:
  static constexpr char const* service_full_name() { return "nighthawk.client.NighthawkService"; }
  class StubInterface {
  public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status QueueRun(::grpc::ClientContext* context,
                                    const ::nighthawk::client::CommandLineOptions& request,
                                    ::nighthawk::client::Output* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::Output>>
    AsyncQueueRun(::grpc::ClientContext* context,
                  const ::nighthawk::client::CommandLineOptions& request,
                  ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::Output>>(
          AsyncQueueRunRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::Output>>
    PrepareAsyncQueueRun(::grpc::ClientContext* context,
                         const ::nighthawk::client::CommandLineOptions& request,
                         ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::Output>>(
          PrepareAsyncQueueRunRaw(context, request, cq));
    }
    class experimental_async_interface {
    public:
      virtual ~experimental_async_interface() {}
      virtual void QueueRun(::grpc::ClientContext* context,
                            const ::nighthawk::client::CommandLineOptions* request,
                            ::nighthawk::client::Output* response,
                            std::function<void(::grpc::Status)>) = 0;
      virtual void QueueRun(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
                            ::nighthawk::client::Output* response,
                            std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }

  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::Output>*
    AsyncQueueRunRaw(::grpc::ClientContext* context,
                     const ::nighthawk::client::CommandLineOptions& request,
                     ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::nighthawk::client::Output>*
    PrepareAsyncQueueRunRaw(::grpc::ClientContext* context,
                            const ::nighthawk::client::CommandLineOptions& request,
                            ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
  public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel);
    ::grpc::Status QueueRun(::grpc::ClientContext* context,
                            const ::nighthawk::client::CommandLineOptions& request,
                            ::nighthawk::client::Output* response) override;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::nighthawk::client::Output>>
    AsyncQueueRun(::grpc::ClientContext* context,
                  const ::nighthawk::client::CommandLineOptions& request,
                  ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<::nighthawk::client::Output>>(
          AsyncQueueRunRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::nighthawk::client::Output>>
    PrepareAsyncQueueRun(::grpc::ClientContext* context,
                         const ::nighthawk::client::CommandLineOptions& request,
                         ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<::nighthawk::client::Output>>(
          PrepareAsyncQueueRunRaw(context, request, cq));
    }
    class experimental_async final : public StubInterface::experimental_async_interface {
    public:
      void QueueRun(::grpc::ClientContext* context,
                    const ::nighthawk::client::CommandLineOptions* request,
                    ::nighthawk::client::Output* response,
                    std::function<void(::grpc::Status)>) override;
      void QueueRun(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
                    ::nighthawk::client::Output* response,
                    std::function<void(::grpc::Status)>) override;

    private:
      friend class Stub;
      explicit experimental_async(Stub* stub) : stub_(stub) {}
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override {
      return &async_stub_;
    }

  private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_ {
      this
    };
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::Output>*
    AsyncQueueRunRaw(::grpc::ClientContext* context,
                     const ::nighthawk::client::CommandLineOptions& request,
                     ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::nighthawk::client::Output>*
    PrepareAsyncQueueRunRaw(::grpc::ClientContext* context,
                            const ::nighthawk::client::CommandLineOptions& request,
                            ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_QueueRun_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr<::grpc::ChannelInterface>& channel,
                                       const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
  public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status QueueRun(::grpc::ServerContext* context,
                                    const ::nighthawk::client::CommandLineOptions* request,
                                    ::nighthawk::client::Output* response);
  };
  template <class BaseClass> class WithAsyncMethod_QueueRun : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithAsyncMethod_QueueRun() { ::grpc::Service::MarkMethodAsync(0); }
    ~WithAsyncMethod_QueueRun() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status QueueRun(::grpc::ServerContext* context,
                            const ::nighthawk::client::CommandLineOptions* request,
                            ::nighthawk::client::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueueRun(::grpc::ServerContext* context,
                         ::nighthawk::client::CommandLineOptions* request,
                         ::grpc::ServerAsyncResponseWriter<::nighthawk::client::Output>* response,
                         ::grpc::CompletionQueue* new_call_cq,
                         ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_QueueRun<Service> AsyncService;
  template <class BaseClass> class ExperimentalWithCallbackMethod_QueueRun : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithCallbackMethod_QueueRun() {
      ::grpc::Service::experimental().MarkMethodCallback(
          0, new ::grpc::internal::CallbackUnaryHandler<::nighthawk::client::CommandLineOptions,
                                                        ::nighthawk::client::Output>(
                 [this](::grpc::ServerContext* context,
                        const ::nighthawk::client::CommandLineOptions* request,
                        ::nighthawk::client::Output* response,
                        ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->QueueRun(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_QueueRun() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status QueueRun(::grpc::ServerContext* context,
                            const ::nighthawk::client::CommandLineOptions* request,
                            ::nighthawk::client::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void QueueRun(::grpc::ServerContext* context,
                          const ::nighthawk::client::CommandLineOptions* request,
                          ::nighthawk::client::Output* response,
                          ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  typedef ExperimentalWithCallbackMethod_QueueRun<Service> ExperimentalCallbackService;
  template <class BaseClass> class WithGenericMethod_QueueRun : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithGenericMethod_QueueRun() { ::grpc::Service::MarkMethodGeneric(0); }
    ~WithGenericMethod_QueueRun() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status QueueRun(::grpc::ServerContext* context,
                            const ::nighthawk::client::CommandLineOptions* request,
                            ::nighthawk::client::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass> class WithRawMethod_QueueRun : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithRawMethod_QueueRun() { ::grpc::Service::MarkMethodRaw(0); }
    ~WithRawMethod_QueueRun() override { BaseClassMustBeDerivedFromService(this); }
    // disable synchronous version of this method
    ::grpc::Status QueueRun(::grpc::ServerContext* context,
                            const ::nighthawk::client::CommandLineOptions* request,
                            ::nighthawk::client::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueueRun(::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
                         ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
                         ::grpc::CompletionQueue* new_call_cq,
                         ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq,
                                         notification_cq, tag);
    }
  };
  template <class BaseClass> class ExperimentalWithRawCallbackMethod_QueueRun : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    ExperimentalWithRawCallbackMethod_QueueRun() {
      ::grpc::Service::experimental().MarkMethodRawCallback(
          0, new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                 [this](::grpc::ServerContext* context, const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response,
                        ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->QueueRun(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_QueueRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueueRun(::grpc::ServerContext* context,
                            const ::nighthawk::client::CommandLineOptions* request,
                            ::nighthawk::client::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void QueueRun(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request,
                          ::grpc::ByteBuffer* response,
                          ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass> class WithStreamedUnaryMethod_QueueRun : public BaseClass {
  private:
    void BaseClassMustBeDerivedFromService(const Service* service) {}

  public:
    WithStreamedUnaryMethod_QueueRun() {
      ::grpc::Service::MarkMethodStreamed(
          0, new ::grpc::internal::StreamedUnaryHandler<::nighthawk::client::CommandLineOptions,
                                                        ::nighthawk::client::Output>(
                 std::bind(&WithStreamedUnaryMethod_QueueRun<BaseClass>::StreamedQueueRun, this,
                           std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QueueRun() override { BaseClassMustBeDerivedFromService(this); }
    // disable regular version of this method
    ::grpc::Status QueueRun(::grpc::ServerContext* context,
                            const ::nighthawk::client::CommandLineOptions* request,
                            ::nighthawk::client::Output* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueueRun(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::nighthawk::client::CommandLineOptions,
                                    ::nighthawk::client::Output>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_QueueRun<Service> StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_QueueRun<Service> StreamedService;
};

} // namespace client
} // namespace nighthawk

#endif // GRPC_api_2fclient_2fservice_2eproto__INCLUDED
