// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/client/service.proto

#include "client/service.grpc.pb.h"
#include "api/client/service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nighthawk {
namespace client {

static const char* NighthawkService_method_names[] = {
    "/nighthawk.client.NighthawkService/QueueRun",
};

std::unique_ptr<NighthawkService::Stub>
NighthawkService::NewStub(const std::shared_ptr<::grpc::ChannelInterface>& channel,
                          const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr<NighthawkService::Stub> stub(new NighthawkService::Stub(channel));
  return stub;
}

NighthawkService::Stub::Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel)
    : channel_(channel), rpcmethod_QueueRun_(NighthawkService_method_names[0],
                                             ::grpc::internal::RpcMethod::NORMAL_RPC, channel) {}

::grpc::Status
NighthawkService::Stub::QueueRun(::grpc::ClientContext* context,
                                 const ::nighthawk::client::CommandLineOptions& request,
                                 ::nighthawk::client::Output* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QueueRun_, context, request,
                                             response);
}

void NighthawkService::Stub::experimental_async::QueueRun(
    ::grpc::ClientContext* context, const ::nighthawk::client::CommandLineOptions* request,
    ::nighthawk::client::Output* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueueRun_,
                                             context, request, response, std::move(f));
}

void NighthawkService::Stub::experimental_async::QueueRun(::grpc::ClientContext* context,
                                                          const ::grpc::ByteBuffer* request,
                                                          ::nighthawk::client::Output* response,
                                                          std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueueRun_,
                                             context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader<::nighthawk::client::Output>*
NighthawkService::Stub::AsyncQueueRunRaw(::grpc::ClientContext* context,
                                         const ::nighthawk::client::CommandLineOptions& request,
                                         ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<::nighthawk::client::Output>::Create(
      channel_.get(), cq, rpcmethod_QueueRun_, context, request, true);
}

::grpc::ClientAsyncResponseReader<::nighthawk::client::Output>*
NighthawkService::Stub::PrepareAsyncQueueRunRaw(
    ::grpc::ClientContext* context, const ::nighthawk::client::CommandLineOptions& request,
    ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<::nighthawk::client::Output>::Create(
      channel_.get(), cq, rpcmethod_QueueRun_, context, request, false);
}

NighthawkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NighthawkService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<NighthawkService::Service,
                                             ::nighthawk::client::CommandLineOptions,
                                             ::nighthawk::client::Output>(
          std::mem_fn(&NighthawkService::Service::QueueRun), this)));
}

NighthawkService::Service::~Service() {}

::grpc::Status
NighthawkService::Service::QueueRun(::grpc::ServerContext* context,
                                    const ::nighthawk::client::CommandLineOptions* request,
                                    ::nighthawk::client::Output* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

} // namespace client
} // namespace nighthawk
