// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/client/service.proto

#include "client/service.grpc.pb.h"
#include "api/client/service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nighthawk {
namespace client {

static const char* NighthawkService_method_names[] = {
    "/nighthawk.client.NighthawkService/Start",
    "/nighthawk.client.NighthawkService/Update",
    "/nighthawk.client.NighthawkService/Stop",
};

std::unique_ptr<NighthawkService::Stub>
NighthawkService::NewStub(const std::shared_ptr<::grpc::ChannelInterface>& channel,
                          const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr<NighthawkService::Stub> stub(new NighthawkService::Stub(channel));
  return stub;
}

NighthawkService::Stub::Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel)
    : channel_(channel), rpcmethod_Start_(NighthawkService_method_names[0],
                                          ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
      rpcmethod_Update_(NighthawkService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC,
                        channel),
      rpcmethod_Stop_(NighthawkService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC,
                      channel) {}

::grpc::Status NighthawkService::Stub::Start(::grpc::ClientContext* context,
                                             const ::nighthawk::client::StartRequest& request,
                                             ::nighthawk::client::StartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Start_, context, request,
                                             response);
}

void NighthawkService::Stub::experimental_async::Start(
    ::grpc::ClientContext* context, const ::nighthawk::client::StartRequest* request,
    ::nighthawk::client::StartResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Start_,
                                             context, request, response, std::move(f));
}

void NighthawkService::Stub::experimental_async::Start(::grpc::ClientContext* context,
                                                       const ::grpc::ByteBuffer* request,
                                                       ::nighthawk::client::StartResponse* response,
                                                       std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Start_,
                                             context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader<::nighthawk::client::StartResponse>*
NighthawkService::Stub::AsyncStartRaw(::grpc::ClientContext* context,
                                      const ::nighthawk::client::StartRequest& request,
                                      ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::nighthawk::client::StartResponse>::Create(channel_.get(), cq, rpcmethod_Start_, context,
                                                  request, true);
}

::grpc::ClientAsyncResponseReader<::nighthawk::client::StartResponse>*
NighthawkService::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context,
                                             const ::nighthawk::client::StartRequest& request,
                                             ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::nighthawk::client::StartResponse>::Create(channel_.get(), cq, rpcmethod_Start_, context,
                                                  request, false);
}

::grpc::Status NighthawkService::Stub::Update(::grpc::ClientContext* context,
                                              const ::nighthawk::client::UpdateRequest& request,
                                              ::nighthawk::client::UpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request,
                                             response);
}

void NighthawkService::Stub::experimental_async::Update(
    ::grpc::ClientContext* context, const ::nighthawk::client::UpdateRequest* request,
    ::nighthawk::client::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_,
                                             context, request, response, std::move(f));
}

void NighthawkService::Stub::experimental_async::Update(
    ::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
    ::nighthawk::client::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_,
                                             context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader<::nighthawk::client::UpdateResponse>*
NighthawkService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context,
                                       const ::nighthawk::client::UpdateRequest& request,
                                       ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::nighthawk::client::UpdateResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context,
                                                   request, true);
}

::grpc::ClientAsyncResponseReader<::nighthawk::client::UpdateResponse>*
NighthawkService::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context,
                                              const ::nighthawk::client::UpdateRequest& request,
                                              ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::nighthawk::client::UpdateResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context,
                                                   request, false);
}

::grpc::Status NighthawkService::Stub::Stop(::grpc::ClientContext* context,
                                            const ::nighthawk::client::StopRequest& request,
                                            ::nighthawk::client::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request,
                                             response);
}

void NighthawkService::Stub::experimental_async::Stop(
    ::grpc::ClientContext* context, const ::nighthawk::client::StopRequest* request,
    ::nighthawk::client::StopResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context,
                                             request, response, std::move(f));
}

void NighthawkService::Stub::experimental_async::Stop(::grpc::ClientContext* context,
                                                      const ::grpc::ByteBuffer* request,
                                                      ::nighthawk::client::StopResponse* response,
                                                      std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context,
                                             request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader<::nighthawk::client::StopResponse>*
NighthawkService::Stub::AsyncStopRaw(::grpc::ClientContext* context,
                                     const ::nighthawk::client::StopRequest& request,
                                     ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::nighthawk::client::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context,
                                                 request, true);
}

::grpc::ClientAsyncResponseReader<::nighthawk::client::StopResponse>*
NighthawkService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context,
                                            const ::nighthawk::client::StopRequest& request,
                                            ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::nighthawk::client::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context,
                                                 request, false);
}

NighthawkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NighthawkService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<NighthawkService::Service,
                                             ::nighthawk::client::StartRequest,
                                             ::nighthawk::client::StartResponse>(
          std::mem_fn(&NighthawkService::Service::Start), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NighthawkService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<NighthawkService::Service,
                                             ::nighthawk::client::UpdateRequest,
                                             ::nighthawk::client::UpdateResponse>(
          std::mem_fn(&NighthawkService::Service::Update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NighthawkService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<NighthawkService::Service,
                                             ::nighthawk::client::StopRequest,
                                             ::nighthawk::client::StopResponse>(
          std::mem_fn(&NighthawkService::Service::Stop), this)));
}

NighthawkService::Service::~Service() {}

::grpc::Status NighthawkService::Service::Start(::grpc::ServerContext* context,
                                                const ::nighthawk::client::StartRequest* request,
                                                ::nighthawk::client::StartResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NighthawkService::Service::Update(::grpc::ServerContext* context,
                                                 const ::nighthawk::client::UpdateRequest* request,
                                                 ::nighthawk::client::UpdateResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NighthawkService::Service::Stop(::grpc::ServerContext* context,
                                               const ::nighthawk::client::StopRequest* request,
                                               ::nighthawk::client::StopResponse* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

} // namespace client
} // namespace nighthawk
